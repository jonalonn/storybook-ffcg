import React from "react";
import withCss from "hoc/WithCss";
import s from "./SimpleButton.css";
import SVG from "components/Common/SVG";
import propTypes from "./SimpleButton.propTypes";
import {
  SIMPLE_BUTTON_PRIMARY,
  SIMPLE_BUTTON_GREY,
  BUTTON_ICON_LEFT,
  BUTTON_ICON_ROTATE_180,
  BUTTON_SIZE_SMALL,
  BUTTON_SIZE_MEDIUM,
  BUTTON_SIZE_LARGE,
  ICON_CIRCLE_SOLID_PRIMARY,
  ICON_CIRCLE_TRANSPARENT_GREY
} from "utils/constants/buttonTypes";

const SimpleButton = ({
  buttonText,
  icon,
  onClickCallback,
  iconPosition,
  iconAnimation,
  buttonClassName,
  buttonSlctr,
  iconClassName,
  disabled,
  materialClickAnimation, // <-- If it should be a grey background onclick
  buttonSize,
  iconCircle
}) => {
  const SimpleButtonClasses = s({
    button: true,
    // BUTTON SIZES
    small: buttonSize === BUTTON_SIZE_SMALL,
    medium: buttonSize === BUTTON_SIZE_MEDIUM,
    large: buttonSize === BUTTON_SIZE_LARGE,
    // BUTTON TYPE
    primary: type === SIMPLE_BUTTON_PRIMARY,
    grey: type === SIMPLE_BUTTON_GREY,
    // ANIMATION
    materialClickAnimation: materialClickAnimation,
    [buttonClassName]: buttonClassName
  });

  const SimpleButtonInnerClasses = s({
    innerContainer: true,
    withIconCircle: iconCircle,
    iconLeft: iconPosition === BUTTON_ICON_LEFT,
    iconRight: !iconPosition // Default is icon to the right,
  });

  const IconCircleClasses = s({
    iconCircle: true,
    iconRotate180: iconAnimation === BUTTON_ICON_ROTATE_180,
    solidPrimaryCircle: iconCircle === ICON_CIRCLE_SOLID_PRIMARY,
    transparentGreyCircle: iconCircle === ICON_CIRCLE_TRANSPARENT_GREY
  });

  if (icon) {
    return (
      <button
        onClick={disabled ? null : onClickCallback}
        className={`${SimpleButtonClasses}
        slctr-SimpleButton ${buttonSlctr}
        ${
          disabled
            ? "slctr-SimpleButton--is-disabled"
            : "slctr-SimpleButton--is-enabled"
        }`}
      >
        <span className={SimpleButtonInnerClasses}>
          {buttonText ? (
            <span className={s({ text: true })}>{buttonText}</span>
          ) : null}
          {iconCircle ? (
            <span className={IconCircleClasses}>
              <SVG
                symbol={icon}
                className={s({ icon: true, [iconClassName]: iconClassName })}
              />
            </span>
          ) : (
            <SVG
              symbol={icon}
              className={s({ icon: true, [iconClassName]: iconClassName })}
            />
          )}
        </span>
      </button>
    );
  }
  return (
    <button
      onClick={disabled ? null : onClickCallback}
      className={`${SimpleButtonClasses}
      slctr-SimpleButton ${buttonSlctr}
        ${
          disabled
            ? "slctr-SimpleButton--is-disabled"
            : "slctr-SimpleButton--is-enabled"
        }`}
    >
      {buttonText ? <span>{buttonText}</span> : null}
    </button>
  );
};

SimpleButton.propTypes = propTypes;

export default withCss(SimpleButton, s);
